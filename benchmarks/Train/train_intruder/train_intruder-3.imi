(*******************************************************************************
 *                                IMITATOR MODEL                               
 * 
 * Title            : train_intruder-3
 * Description      : Railway crossing with an intruder that can either disable some sensor (preventing the gate do detect that the train is approaching) or cut the power (preventing the gate to lower), possibly provoking a crash. Additionnally, the gate has a security mechanism that lowers the gate some time after the power is cut.
 * Correctness      : "Crash" cannot happen
 * Scalable         : 
 * Generated        : 
 * Categories       : 
 * Source           : Own work
 * bibkey           : 
 * Author           : Étienne André, Michał Knapik
 * Modeling         : Étienne André
 * Input by         : Étienne André
 * License          : 
 * 
 * Created          : 2015/09/24
 * Last modified    : 2021/07/09
 * Model version    : 
 * 
 * IMITATOR version : 
 ******************************************************************************)

var

(* Clocks *)
 	x_train,
 	x_gate,
 	x_intruder,
		: clock;

(* Boolean discrete variables *)
	gate_down,     (* (Boolean) encoding whether the gate is down *)
	sensors_active,(* (Boolean) encoding whether the sensor is active *)
		: bool;

(* Train parameters *)
	p_far,                (* time between being far and approaching *)
	p_approaching,        (* time between the approach and the passing *)
	
(* Gate parameters *)
	p_waiting,            (* time from the sensor activation until starting lowering the gate *)
	p_emergency_waiting,  (* time from the power cut until starting lowering the gate *)
	p_emergency_lowering, (* time to lower the gate in emergency mode *)
	p_lowering,           (* time to lower the gate *)
	
(* Intruder parameters *)
	p_walking_sensor,     (* time to walk to (and disable) the sensor *)
	p_walking_house,      (* time to walk to (and disable) the sensor *)

		: parameter;


(************************************************************)
  automaton train
(************************************************************)
synclabs: sensor_far, pass;

loc far: invariant x_train <= p_far
	(* Normal mode: sensors are on *)
	when x_train = p_far & sensors_active sync sensor_far do {x_train := 0} goto approaching;
	(* Failure: sensors are off *)
	when x_train = p_far & not(sensors_active) do {x_train := 0} goto approaching;

loc approaching: invariant x_train <= p_approaching
	(* Normal situation *)
	when x_train = p_approaching & gate_down do {x_train := 0} sync pass goto gone;
	(* Gate not closed! *)
	when x_train = p_approaching & not(gate_down) do {x_train := 0} sync pass goto crash;

(** HACK: stop time to reduce state space *)
loc gone: invariant x_train <= 0

(** HACK: stop time to reduce state space *)
loc crash: invariant x_train <= 0


end (* train *)


(************************************************************)
  automaton gate
(************************************************************)
synclabs: pass, power_cut, sensor_far, start_lowering, end_lowering;

loc up: invariant True
	when True sync sensor_far do {x_gate := 0} goto waiting;
	(* Gate is reinitialized whenever the train passes *)
	when True sync pass do {x_gate := 0} goto up;
	(* When power cut: gate goes to emergency lowering *)
	when True sync power_cut do {x_gate := 0} goto no_power;

loc no_power: invariant x_gate <= p_emergency_waiting
	(* Lower the gate after some time *)
	when x_gate = p_emergency_waiting sync start_lowering do {x_gate := 0} goto emergency_lowering;
	(* Just to prevent deadlock *)
	when True sync pass do {x_gate := 0} goto no_power;
	when True sync sensor_far do {x_gate := 0} goto no_power;

loc waiting: invariant x_gate <= p_waiting
	when x_gate = p_waiting sync start_lowering do {x_gate := 0} goto lowering;
	(* Gate is reinitialized whenever the train passes *)
	when True sync pass do {x_gate := 0} goto up;
	(* When power cut: gate goes to emergency lowering *)
	when True sync power_cut do {x_gate := 0} goto no_power;

loc lowering: invariant x_gate <= p_lowering
	when x_gate = p_lowering sync end_lowering do {x_gate := 0, gate_down := True} goto down;
	(* no influce of power cut when the gate is lowering (which is debatable) *)
	when True sync power_cut goto lowering;
	(* Gate is reinitialized whenever the train passes *)
	when True sync pass do {x_gate := 0} goto up;

loc emergency_lowering: invariant x_gate <= p_emergency_lowering
	when x_gate = p_emergency_lowering sync end_lowering do {x_gate := 0, gate_down := True} goto down;
	(* no influce of power cut when the gate is lowering *)
	when True sync power_cut goto emergency_lowering;
	(* Gate is reinitialized whenever the train passes *)
	when True sync pass do {x_gate := 0} goto up;

loc down: invariant True
	(* no influce of power cut when the gate is down *)
	when True sync power_cut goto down;
	(* Gate is reinitialized whenever the train passes *)
	when True sync pass do {x_gate := 0} goto up;

end (* gate *)


(************************************************************)
  automaton intruder
(************************************************************)
synclabs: break_sensor, choose_house, choose_sensor, power_cut;

urgent loc choosing: invariant True
	when True sync choose_sensor goto walking_sensor;
	when True sync choose_house goto walking_house;

loc walking_sensor: invariant x_intruder <= p_walking_sensor
	when x_intruder = p_walking_sensor sync break_sensor do {sensors_active := False, x_intruder := 0} goto intruder_done;

loc walking_house: invariant x_intruder <= p_walking_house
	when x_intruder = p_walking_house sync power_cut do {sensors_active := False, x_intruder := 0} goto intruder_done;

loc intruder_done: invariant True

end (* intruder *)



(************************************************************)
(* Initial state *)
(************************************************************)

init := {
	
    discrete =
		(*------------------------------------------------------------*)
		(* Initial location *)
		(*------------------------------------------------------------*)
		loc[train]     := far,
		loc[gate]      := up,
		loc[intruder]  := choosing,

		(*------------------------------------------------------------*)
		(* Initial discrete variables assignments *)
		(*------------------------------------------------------------*)
		gate_down      := False,
		sensors_active := True,
    ;

    continuous =        
		(*------------------------------------------------------------*)
		(* Initial clock constraints *)
		(*------------------------------------------------------------*)
		& x_train    = 0
		& x_gate     >= 0
		& x_intruder = 0

		(*------------------------------------------------------------*)
		(* Parameter constraints *)
		(*------------------------------------------------------------*)
		& p_far                > 0
		& p_approaching        > 0
		& p_waiting            >= 0
		& p_lowering           > 0
		& p_walking_sensor     > 0
		& p_walking_house      > 0
		& p_emergency_waiting  >= 0
		& p_emergency_lowering > 0
	;
}


(************************************************************)
(* The end *)
(************************************************************)
end
