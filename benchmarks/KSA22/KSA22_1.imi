(*******************************************************************************
 *                                IMITATOR MODEL                               
 * 
 * Title            : KSA22_1
 * Description      : model from "Protecting Smart Homes from Unintended Application Actions"
 * Correctness      : TODO
 * Scalable         : no
 * Generated        : no
 * Categories       : Security
 * Source           : "Protecting Smart Homes from Unintended Application Actions" (ICCPS 2022) (10.1109/ICCPS54341.2022.00031)
 * bibkey           : KSA22
 * Author           : Aqsa Kashaf, Vyas Sekar, Yuvraj Agarwal
 * Modeling         : Aqsa Kashaf, Vyas Sekar, Yuvraj Agarwal
 * Input by         : Aqsa Kashaf, Vyas Sekar, Yuvraj Agarwal, Dylan Marinho
 * License          : Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
 * 
 * Created          : <2022/08
 * Last modified    : 2023/05/11
 * Model version    : 1.1
 * 
 * IMITATOR version : 3.4
 ******************************************************************************)

(* the default output should be   86400 >= time1_23
 & time1_23 > 0
 indicating that the action is blocked. This model checks if switch_switch_1_BigTurnOFF0_0 blocks PetFeederShield_PetFeederShield_1_FeedMyPet0_0
	 if it does not, then we check if the good location is reachable, if it is unreachable, then the action is blocked, else no
	imitator for now does not allow checking for rachability of good locations*)

var
	(* Clocks *)
	schedule_clock,
	timer_ba,
	location_clk,
	app_clk,
		:clock;

	(* Parameters *)
		time1_23,
			:parameter;

	location,
	app,
	switch_switch_1,
	PetFeederShield_PetFeederShield_1,
		:discrete;

(* check if a change location mode event has been issued*)
(************************************************************)
	automaton location_Env
(************************************************************)
	actions: location_Evt;

	loc mode0: invariant True
		when location_clk > 0 sync location_Evt do {location:=0, location_clk:=0} goto mode0;
		when location_clk > 0 sync location_Evt do {location:=1, location_clk:=0} goto mode0;

	end

(* check if app has been tapped*)
(************************************************************)
	automaton app_Env
(************************************************************)
	actions: app_Evt;

	loc mode0: invariant True
		when app_clk > 0 sync app_Evt do {app:=0, app_clk:=0} goto mode0;
		when app_clk > 0 sync app_Evt do {app:=1, app_clk:=0} goto mode0;

	end

(* device model for pet feeder shield which responds to on and off actions, if off, feed cannot be called*)
(************************************************************)
	automaton PetFeederShield_PetFeederShield_Dev_1
(************************************************************)
	actions: PetFeederShield_off, PetFeederShield_on, PetFeederShield_PetFeederShield_1_FeedMyPet0_0;

	loc mode0: invariant True
		when True sync PetFeederShield_off do {} goto mode1;
		when True sync PetFeederShield_on do {} goto mode0;
		when True sync PetFeederShield_PetFeederShield_1_FeedMyPet0_0 do {} goto mode0;

	loc mode1: invariant True
		when True sync PetFeederShield_off do {} goto mode1;
		when True sync PetFeederShield_on do {} goto mode0;

	end

(* interaction model which models the interaction between switch on/off and pet feeder*)
(************************************************************)
	automaton PetFeederShield_PetFeederShield_Dev_interaction_1
(************************************************************)
	actions: switch_switch_1_BigTurnOFF0_0, switch_switch_1_BigTurnOFF1_0,PetFeederShield_off, PetFeederShield_on;

	loc mode0: invariant True
		when True sync switch_switch_1_BigTurnOFF0_0 do {} goto mode1;
		when True sync switch_switch_1_BigTurnOFF1_0 do {} goto mode1;

	urgent loc mode1: invariant True
		when switch_switch_1 = 96 sync PetFeederShield_off do {} goto mode0;
		when switch_switch_1 = 97 sync PetFeederShield_on do {} goto mode0;

	end

(* app which turns a switch off when location mode changes*)
(************************************************************)
	automaton BigTurnOFF0
	(************************************************************)
	actions: location_Evt, switch_switch_1_BigTurnOFF0_0;

	loc mode0: invariant True
		when True sync location_Evt do {} goto mode1;

	urgent loc mode1: invariant True
		when location > 0 sync switch_switch_1_BigTurnOFF0_0 do {switch_switch_1:=96} goto mode0;
		when location <= 0 do {} goto mode0;

	end

(* app which turns a switch off when app is tapped*)
(************************************************************)
	automaton BigTurnOFF1
(************************************************************)
	actions: app_Evt, switch_switch_1_BigTurnOFF1_0;

	loc mode0: invariant True
		when True sync app_Evt do {} goto mode1;

	urgent loc mode1: invariant True
		when app > 0 sync switch_switch_1_BigTurnOFF1_0 do {switch_switch_1:=96} goto mode0;
		when app <= 0 do {} goto mode0;

	end

(* app which feeds the pet at a given time*)
(************************************************************)
	automaton FeedMyPet0
(************************************************************)
	actions: PetFeederShield_PetFeederShield_1_FeedMyPet0_0;

	loc mode0: invariant schedule_clock <= time1_23
		when schedule_clock = time1_23 sync PetFeederShield_PetFeederShield_1_FeedMyPet0_0 do {PetFeederShield_PetFeederShield_1:=1} goto mode1;

	loc mode1: invariant True

	end

(* model which checks if switch_switch_1_BigTurnOFF0_0 blocks PetFeederShield_PetFeederShield_1_FeedMyPet0_0*)
(************************************************************)
	automaton PetFeederShield_PetFeederShield_1_blocked_action
(************************************************************)
	actions: switch_switch_1_BigTurnOFF0_0, switch_switch_1_BigTurnOFF1_0, PetFeederShield_PetFeederShield_1_FeedMyPet0_0;

	loc mode0: invariant True
		when True sync PetFeederShield_PetFeederShield_1_FeedMyPet0_0 do {} goto mode0;
		when True sync switch_switch_1_BigTurnOFF0_0 do {timer_ba:=0} goto mode1;
		when True sync switch_switch_1_BigTurnOFF1_0 do {} goto mode0;

	loc mode1: invariant True
		when timer_ba > 0 sync PetFeederShield_PetFeederShield_1_FeedMyPet0_0 do {} goto good;
		when timer_ba = 0 sync PetFeederShield_PetFeederShield_1_FeedMyPet0_0 do {} goto mode1;
		when True sync switch_switch_1_BigTurnOFF0_0 do {} goto mode1;
		when True sync switch_switch_1_BigTurnOFF1_0 do {} goto mode0;

	urgent loc good: invariant True

	end

init := {
	discrete =
  	(* Initial state *)
		loc[location_Env] := mode0,
		loc[app_Env] := mode0,
		loc[BigTurnOFF0] := mode0,
		loc[BigTurnOFF1] := mode0,
		loc[FeedMyPet0] := mode0,
		loc[PetFeederShield_PetFeederShield_Dev_interaction_1] := mode0,
		loc[PetFeederShield_PetFeederShield_Dev_1] := mode0,
		loc[PetFeederShield_PetFeederShield_1_blocked_action] := mode0
  ;

	continuous =
		& location = 0
		& app = 0
		& switch_switch_1 = 0
		& PetFeederShield_PetFeederShield_1 = 0

		& schedule_clock = 0
		& location_clk = 0
		& app_clk = 0

		& time1_23 > 0
		& time1_23 <= 86400
	;
}

end
